import psycopg2
import json
import decimal
from collections import defaultdict
from dotenv import load_dotenv
import os

# Load environment variables from .env file
load_dotenv()

def decimal_default(obj):
    if isinstance(obj, decimal.Decimal):
        return float(obj)
    raise TypeError(f"Object of type {type(obj)} is not JSON serializable")

def reinit_data():
    """H√†m ch√≠nh ƒë·ªÉ kh·ªüi t·∫°o l·∫°i to√†n b·ªô d·ªØ li·ªáu v√† ma tr·∫≠n t∆∞∆°ng ƒë·ªìng"""
    try:
        print("üîÑ B·∫Øt ƒë·∫ßu kh·ªüi t·∫°o l·∫°i d·ªØ li·ªáu...")
        
        # K·∫øt n·ªëi database
        conn = psycopg2.connect(
            host=os.getenv("DB_HOST"),
            port=os.getenv("DB_PORT"),
            database=os.getenv("DB_NAME"),
            user=os.getenv("DB_USER"),
            password=os.getenv("DB_PASSWORD")
        )
        cur = conn.cursor()
        
        print("üìä ƒêang l·∫•y d·ªØ li·ªáu t·ª´ database...")
        
        # ====== 1. L·∫•y th√¥ng tin m√≥n ƒÉn ======
        cur.execute("""
            SELECT 
                fr.id, 
                fr.name, 
                fr.description, 
                fr.images, 
                fr.video_urls, 
                fr.cost, 
                fr.cooking_time, 
                fr.difficulty, 
                fr.average_rating, 
                fr.total_reviews, 
                fr.view_count,
                fr.preping_time
            FROM public.food_recipe fr
        """)
        recipes_raw = cur.fetchall()
        recipe_cols = [desc[0] for desc in cur.description]
        
        # ====== 2. L·∫•y nguy√™n li·ªáu ======
        cur.execute("""
            SELECT 
                fri.recipe_id,
                fi.id AS ingredient_id,
                fi.name
            FROM public.food_recipe_ingredient fri
            JOIN public.food_ingredient fi ON fri.ingredient_id::uuid = fi.id
        """)
        ingredients_raw = cur.fetchall()
        ingredient_cols = [desc[0] for desc in cur.description]
        
        # ====== 3. L·∫•y tag ======
        cur.execute("""
            SELECT 
                frt.recipe_id,
                ft.id AS tag_id,
                ft.name,
                ft.group
            FROM public.food_recipe_tag frt
            JOIN public.food_tag ft ON frt.tag_id::uuid = ft.id
            WHERE frt.tag_id IS NOT NULL AND frt.tag_id <> ''
        """)
        tags_raw = cur.fetchall()
        tag_cols = [desc[0] for desc in cur.description]
        
        print("üîß ƒêang x·ª≠ l√Ω d·ªØ li·ªáu...")
        
        # ====== X·ª≠ l√Ω d·ªØ li·ªáu ======
        # C·∫•u tr√∫c d·ªØ li·ªáu m·ªõi:
        # - method: Danh s√°ch c√°ch ch·∫ø bi·∫øn (t·ª´ tag group 7)
        # - recipe_type: Danh s√°ch lo·∫°i m√≥n ƒÉn (t·ª´ tag group 9)  
        # - meal_type: Danh s√°ch lo·∫°i b·ªØa (t·ª´ tag group 10)
        # T·ªï ch·ª©c nguy√™n li·ªáu theo recipe_id
        ingredient_map = defaultdict(list)
        for row in ingredients_raw:
            row_dict = dict(zip(ingredient_cols, row))
            recipe_id = row_dict.pop("recipe_id")
            ingredient_map[recipe_id].append(row_dict)
        
        # T·ªï ch·ª©c tags theo recipe_id
        tag_map = defaultdict(list)
        for row in tags_raw:
            row_dict = dict(zip(tag_cols, row))
            recipe_id = row_dict.pop("recipe_id")
            tag_map[recipe_id].append(row_dict)
        
        # G·ªôp v√†o t·ª´ng m√≥n ƒÉn
        recipes = []
        for row in recipes_raw:
            recipe = dict(zip(recipe_cols, row))
            recipe_id = recipe["id"]
            recipe["ingredients"] = ingredient_map.get(recipe_id, [])
            recipe["tags"] = tag_map.get(recipe_id, [])
            
            # Th√™m th√¥ng tin t·ª´ tag groups
            # Group 7: C√°ch ch·∫ø bi·∫øn (method) - VD: r√°n, lu·ªôc, n∆∞·ªõng
            # Group 9: Lo·∫°i m√≥n ƒÉn (recipe_type) - VD: m√≥n ch√≠nh, m√≥n ph·ª•
            # Group 10: Lo·∫°i b·ªØa (meal_type) - VD: b·ªØa s√°ng, b·ªØa tr∆∞a, b·ªØa t·ªëi
            recipe["method"] = []
            recipe["recipe_type"] = []
            recipe["meal_type"] = []
            
            # Ki·ªÉm tra v√† th√™m th√¥ng tin t·ª´ tags
            for tag in recipe["tags"]:
                group = tag.get("group")
                if 7 in group:  # Method
                    recipe["method"].append(tag["name"])
                elif 9 in group:  # Recipe type
                    recipe["recipe_type"].append(tag["name"])
                elif 10 in group:  # Meal type
                    recipe["meal_type"].append(tag["name"])
            
            recipes.append(recipe)
        
        print("üíæ ƒêang l∆∞u d·ªØ li·ªáu recipes...")
        # ====== Xu·∫•t JSON ======
        with open("data/recipes.json", "w", encoding="utf-8") as f:
            json.dump(recipes, f, ensure_ascii=False, indent=2, default=decimal_default)

        # ====== 4. L·∫•y nguy√™n li·ªáu ======
        cur.execute("""
            SELECT 
                fi.id AS ingredient_id,
                fi.name,
                fi.cost,
                fi.allergen_flag,
                fi.category
            FROM public.food_ingredient fi
        """)
        ingredients_raw = cur.fetchall()
        ingredient_cols = [desc[0] for desc in cur.description]

        # L∆∞u danh s√°ch nguy√™n li·ªáu v√†o file JSON
        ingredients = []
        for row in ingredients_raw:
            ingredient = dict(zip(ingredient_cols, row))
            ingredients.append(ingredient)

        print("üíæ ƒêang l∆∞u d·ªØ li·ªáu ingredients...")
        with open("data/ingredients.json", "w", encoding="utf-8") as f:
            json.dump(ingredients, f, ensure_ascii=False, indent=2, default=decimal_default)

        # ====== 5. L·∫•y tag ======
        cur.execute("""
            SELECT 
                ft.id AS tag_id,
                ft.name,
                ft.description,
                ft.type,
                ft.group
            FROM public.food_tag ft
        """)
        tags_raw = cur.fetchall()
        tag_cols = [desc[0] for desc in cur.description]

        # L∆∞u danh s√°ch tag v√†o file JSON
        tags = []
        for row in tags_raw:
            tag = dict(zip(tag_cols, row))
            tags.append(tag)

        print("üíæ ƒêang l∆∞u d·ªØ li·ªáu tags...")
        with open("data/tags.json", "w", encoding="utf-8") as f:
            json.dump(tags, f, ensure_ascii=False, indent=2, default=decimal_default)

        cur.close()
        conn.close()
        
        print("‚úÖ ƒê√£ ho√†n th√†nh vi·ªác kh·ªüi t·∫°o l·∫°i d·ªØ li·ªáu!")
        return True
        
    except Exception as e:
        print(f"‚ùå L·ªói khi kh·ªüi t·∫°o l·∫°i d·ªØ li·ªáu: {str(e)}")
        return False

def main():
    """H√†m ch√≠nh ƒë·ªÉ ch·∫°y khi g·ªçi tr·ª±c ti·∫øp file n√†y"""
    return reinit_data()

if __name__ == "__main__":
    main()